package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"
	"fmt"

	"github.com/ngoctb13/seta-train/handler/gql/user/generated"
	"github.com/ngoctb13/seta-train/handler/gql/user/model"
	"github.com/ngoctb13/seta-train/internal/auth"
	"github.com/ngoctb13/seta-train/internal/models"
	"golang.org/x/crypto/bcrypt"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.CreateUserInput) (bool, error) {
	hash, err := bcrypt.GenerateFromPassword([]byte(input.Password), bcrypt.DefaultCost)
	if err != nil {
		return false, err
	}
	user := &models.User{
		Username:     input.Username,
		Email:        input.Email,
		PasswordHash: string(hash),
		Role:         string(input.Role),
	}
	err = r.Resolver.UserUsecase.CreateUser(ctx, user)
	if err != nil {
		return false, err
	}
	return true, nil
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.LoginInput) (string, error) {
	user, err := r.Resolver.UserUsecase.GetUserByEmail(ctx, input.Email)
	if err != nil {
		return "", err
	}

	err = bcrypt.CompareHashAndPassword([]byte(user.PasswordHash), []byte(input.Password))
	if err != nil {
		return "", fmt.Errorf("invalid email or password")
	}

	token, err := auth.GenerateJWT(user.UserID, user.Role)
	if err != nil {
		return "", err
	}
	return token, nil
}

// Logout is the resolver for the logout field.
func (r *mutationResolver) Logout(ctx context.Context) (bool, error) {
	// Nếu dùng JWT thì logout chỉ là phía client xóa token
	return true, nil
}

// FetchUsers is the resolver for the fetchUsers field.
func (r *queryResolver) FetchUsers(ctx context.Context) ([]*models.User, error) {
	return r.Resolver.UserUsecase.GetAllUsers(ctx)
}

// Role is the resolver for the role field.
func (r *userResolver) Role(ctx context.Context, obj *models.User) (model.Role, error) {
	return model.Role(obj.Role), nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

// User returns generated.UserResolver implementation.
func (r *Resolver) User() generated.UserResolver { return &userResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
