package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"

	"github.com/ngoctb13/seta-train/handler/gql/user/generated"
	"github.com/ngoctb13/seta-train/handler/gql/user/model"
	"github.com/ngoctb13/seta-train/internal/models"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.UserInput) (*models.User, error) {
	user := &models.User{
		Username: input.Name,
		Email:    input.Email,
	}
	err := r.Resolver.UserUsecase.CreateUser(ctx, user)
	if err != nil {
		return nil, err
	}
	return user, nil
}

// GetListUser is the resolver for the GetListUser field.
func (r *queryResolver) GetListUser(ctx context.Context) ([]*models.User, error) {
	return r.Resolver.UserUsecase.GetAllUsers(ctx)
}

// GetUserByID is the resolver for the GetUserByID field.
func (r *queryResolver) GetUserByID(ctx context.Context, id string) (*models.User, error) {
	return r.Resolver.UserUsecase.GetUserByID(ctx, id)
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
