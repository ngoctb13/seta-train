package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"

	"github.com/ngoctb13/seta-train/auth-service/graph/model"
	"github.com/ngoctb13/seta-train/auth-service/internal/auth"
	sharedmodel "github.com/ngoctb13/seta-train/shared-modules/model"
	"github.com/ngoctb13/seta-train/shared-modules/utils"
)

func ToGraphQLUser(u *sharedmodel.User) *model.User {
	if u == nil {
		return nil
	}
	return &model.User{
		ID:       u.ID,
		Username: u.Username,
		Email:    u.Email,
		Password: u.PasswordHash,
		Role:     model.Role(u.Role),
	}
}

func ToSharedModelUser(u *model.User) *sharedmodel.User {
	if u == nil {
		return nil
	}
	return &sharedmodel.User{
		ID:           u.ID,
		Username:     u.Username,
		Email:        u.Email,
		PasswordHash: u.Password,
		Role:         string(u.Role),
	}
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.CreateUserInput) (*model.User, error) {
	hashedPassword, err := utils.HashPassword(input.Password)
	if err != nil {
		r.Logger.Error("Failed to hash password: %v", err)
		return nil, err
	}

	user := &model.User{
		Username: input.Username,
		Email:    input.Email,
		Password: hashedPassword,
		Role:     input.Role,
	}

	err = r.UserUsecase.CreateUser(ctx, ToSharedModelUser(user))
	if err != nil {
		r.Logger.Error("CreateUserUsecase fail with error: %v", err)
		return nil, err
	}

	return user, nil
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.LoginInput) (*model.AuthPayload, error) {
	user, err := r.UserUsecase.GetUserByUsername(ctx, input.Username)
	if err != nil {
		return nil, err
	}

	err = utils.ComparePassword(input.Password, user.PasswordHash)
	if err != nil {
		return nil, err
	}

	token, err := auth.GenerateJWT(user.ID, user.Role)
	if err != nil {
		return nil, err
	}

	return &model.AuthPayload{
		Token: token,
	}, nil
}

// Logout is the resolver for the logout field.
func (r *mutationResolver) Logout(ctx context.Context) (bool, error) {
	r.Logger.Info("User logged out successfully")
	return true, nil
}

// AssignRole is the resolver for the assignRole field.
func (r *mutationResolver) AssignRole(ctx context.Context, input model.AssignRoleInput) (*model.User, error) {
	err := r.UserUsecase.AssignRole(ctx, input.UserID, string(input.Role))
	if err != nil {
		r.Logger.Error("AssignRoleUsecase fail with error: %v", err)
		return nil, err
	}

	user, err := r.UserUsecase.GetUserByID(ctx, input.UserID)
	if err != nil {
		r.Logger.Error("GetUserByIDUsecase fail with error: %v", err)
		return nil, err
	}

	return ToGraphQLUser(user), nil
}

// FetchUsers is the resolver for the fetchUsers field.
func (r *queryResolver) FetchUsers(ctx context.Context) ([]*model.User, error) {
	sharedUsers, err := r.UserUsecase.GetAllUsers(ctx)
	if err != nil {
		r.Logger.Error("GetAllUsersUsecase fail with error: %v", err)
		return nil, err
	}

	gqlUsers := make([]*model.User, len(sharedUsers))
	for i, user := range sharedUsers {
		gqlUsers[i] = ToGraphQLUser(user)
	}

	return gqlUsers, nil
}

// VerifyToken is the resolver for the verifyToken field.
func (r *queryResolver) VerifyToken(ctx context.Context, token string) (*model.User, error) {
	id, _, err := auth.ParseAndValidateJWT(token)
	if err != nil {
		return nil, err
	}

	user, err := r.UserUsecase.GetUserByID(ctx, id)
	if err != nil {
		r.Logger.Error("GetUserByIDUsecase fail with error: %v", err)
		return nil, err
	}

	return ToGraphQLUser(user), nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
